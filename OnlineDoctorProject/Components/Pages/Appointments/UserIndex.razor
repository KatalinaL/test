@page "/userIndex"
@using BusinessLayer
@using OnlineDoctorProject.Components.Services
@using DataLayer;
@using Microsoft.AspNetCore.Identity;
@using MudBlazor;
@inject UserManager<User> userManager;
@inject AuthenticationStateProvider authenticationStateProvider;
@inject MedicalDbContext context;
@inject DoctorContext doctorManager
@inject PatientContext patientManager
@inject StateContainer<Patient> patientContainer
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authStateProvider
@using Microsoft.EntityFrameworkCore;

<MudContainer MaxWidth="MaxWidth.Large" Class="user-index-container">
    <MudPaper Class="user-index-paper">
        <MudStack Spacing="3">
            <MudText Typo="Typo.h5" Align="Align.Center" Class="user-index-title">Списък на специалисти</MudText>

            @if (doctors == null)
            {
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            }
            else
            {
                <MudTable Items="doctors" Hover="true" Dense="true" Bordered="true" Elevation="0" Class="user-index-table">
                    <HeaderContent>
                        <MudTh>Име</MudTh>
                        <MudTh>Презиме</MudTh>
                        <MudTh>Фамилия</MudTh>
                        <MudTh>Специалност</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.FirstName</MudTd>
                        <MudTd>@context.SecondName</MudTd>
                        <MudTd>@context.LastName</MudTd>
                        <MudTd>@FormatSpecialty(context.DoctorSpecialty)</MudTd>
                        <MudTd>
                            <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => NavigateToCreate(context.Id))">
                                Запиши си среща
                            </MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }

            <MudDivider Class="my-4" />

            <MudStack Justify="Justify.Center">
                <MudButton Href="/" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.ArrowBack">Назад</MudButton>
            </MudStack>
        </MudStack>
    </MudPaper>
</MudContainer>

<style>
    /* ====== User Index Page Style (Local to this Razor file) ====== */
    .user-index-container {
        margin-top: 4rem;
        margin-bottom: 4rem;
        display: flex;
        justify-content: center;
    }

    .user-index-paper {
        padding: 2rem;
        border-radius: 1.5rem;
        background: linear-gradient(to right, #f5f7fa, #c3cfe2);
        box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.08);
        max-width: 1000px;
        width: 100%;
    }

    .user-index-title {
        color: #3f51b5;
        font-weight: bold;
    }

    .user-index-table {
        background-color: #ffffff;
        border-radius: 1rem;
        overflow: hidden;
    }

        .user-index-table thead {
            background-color: #e3eafc;
        }

        .user-index-table th,
        .user-index-table td {
            text-align: center;
            padding: 1rem;
        }

    .my-4 {
        margin: 1.5rem 0;
    }

    .user-index-btn {
        border-radius: 0.5rem;
        background-color: #2196f3;
        color: white;
    }

        .user-index-btn:hover {
            background-color: #1976d2;
            transform: scale(1.05);
            transition: transform 0.3s ease;
        }

    .user-index-divider {
        border-color: #90caf9;
    }
</style>

@code {
    private string? loggedInPatientId;
    bool fixedheader = true;
    bool bordered = true;
    string[] headings = { "Име", "Презиме", "Фамилия", "Специалност" };
    ICollection<Doctor> doctors;
    ICollection<Patient> patients;
    ICollection<User> users;

    protected override async Task OnInitializedAsync()
    {
        await LoadDoctorsAndPatients();

        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var username = user.FindFirst(System.Security.Claims.ClaimTypes.Name)?.Value;

        if (!string.IsNullOrEmpty(username))
        {
            var currentPatient = users.FirstOrDefault(p => p.UserName == username);
            if (currentPatient != null)
            {
                loggedInPatientId = currentPatient.Id;
            }
        }
    }

    async Task LoadDoctorsAndPatients()
    {
        doctors = await doctorManager.ReadAllAsync(true, false);
        patients = await patientManager.ReadAllAsync(true, false);
        users = await context.Users.ToListAsync();
    }

    void NavigateToCreate(string doctorId)
    {
        if (!string.IsNullOrEmpty(loggedInPatientId))
        {
            navigationManager.NavigateTo($"/appointments/create/{doctorId}/{loggedInPatientId}");
        }
        else
        {
            navigationManager.NavigateTo($"/appointments/create/{doctorId}");
        }
    }

    private string FormatSpecialty(Specialty specialty)
    {
        return specialty.ToString().Replace("_", " ");
    }
}
