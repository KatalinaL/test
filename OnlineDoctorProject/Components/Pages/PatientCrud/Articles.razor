@page "/articles"
@using BusinessLayer
@using OnlineDoctorProject.DataLayer
@using Microsoft.EntityFrameworkCore
@inject MedicalDbContext DbContext
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="articles-container">
    <section class="articles-section">
        <div class="text-center">
            <span class="badge">Статии</span>
            <h2 class="articles-heading">Информативни и полезни материали</h2>
            <p class="articles-subtitle">Прочетете нашите последни публикации по теми, свързани със здравето и медицината.</p>
        </div>

        @if (articlesData == null)
        {
            <div class="loading-wrapper">
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
            </div>
        }
        else if (!articlesData.Any())
        {
            <MudAlert Severity="Severity.Info">Няма публикувани статии.</MudAlert>
        }
        else
        {
            <div class="articles-grid">
                @foreach (var article in articlesData)
                {
                    <div class="article-card" @onclick="@(() => OnRowClicked(article))">
                        <h3>@article.Title</h3>
                        <p class="article-meta">от <strong>@article.AuthorName</strong> | @article.PublishedDate.ToString("dd.MM.yyyy HH:mm")</p>
                        <p class="article-preview">@article.Content?.Substring(0, Math.Min(120, article.Content.Length))... <span class="read-more">Прочети повече</span></p>
                    </div>
                }
            </div>
        }
    </section>
</MudContainer>

<style>
    .articles-container {
        padding: 0;
    }

    .articles-section {
        padding: 80px 0;
        background-color: #f0fdfa;
    }

    .badge {
        display: inline-block;
        background-color: #ccfbf1;
        color: #0f766e;
        padding: 6px 12px;
        border-radius: 12px;
        font-size: 0.9rem;
        font-weight: 600;
        margin-bottom: 16px;
    }

    .articles-heading {
        font-size: 2.5rem;
        color: #0f766e;
        font-weight: 700;
        margin-bottom: 16px;
    }

    .articles-subtitle {
        font-size: 1.2rem;
        color: #333;
        max-width: 700px;
        margin: 0 auto 40px;
    }

    .articles-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 30px;
    }

    .article-card {
        background: white;
        padding: 24px;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .article-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
        }

        .article-card h3 {
            color: #0f766e;
            font-size: 1.3rem;
            margin-bottom: 10px;
        }

    .article-meta {
        font-size: 0.9rem;
        color: #555;
        margin-bottom: 10px;
    }

    .article-preview {
        font-size: 1rem;
        color: #333;
        line-height: 1.5;
    }

    .read-more {
        color: #0f766e;
        font-weight: 600;
    }

    .loading-wrapper {
        display: flex;
        justify-content: center;
        padding: 40px 0;
    }

    @@media (max-width: 768px) {
        .articles-heading {
            font-size: 2rem;
        }

        .articles-subtitle {
            font-size: 1rem;
        }
    }
</style>

@code {
    private List<ArticleDTO> articlesData;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            articlesData = await (from a in DbContext.Articles
                                  join u in DbContext.Users on a.AuthorId equals u.Id into userJoin
                                  from u in userJoin.DefaultIfEmpty()
                                  orderby a.PublishedDate descending
                                  select new ArticleDTO
                                      {
                                          Id = a.Id,
                                          Title = a.Title,
                                          Content = a.Content,
                                          PublishedDate = a.PublishedDate,
                                          AuthorName = u != null ? u.FirstName + " " + u.LastName : "Не е зададен"
                                      }).ToListAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Грешка при зареждане на статиите: " + ex.Message, Severity.Error);
        }
    }

    private void OnRowClicked(ArticleDTO article)
    {
        if (!string.IsNullOrWhiteSpace(article?.Id))
        {
            Navigation.NavigateTo($"/articles/add/{article.Id}");
        }
        else
        {
            Snackbar.Add("Грешка: ID-то на статията е невалидно.", Severity.Warning);
        }
    }
}
