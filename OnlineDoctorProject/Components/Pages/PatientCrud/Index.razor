@page "/patients"
@using BusinessLayer
@using OnlineDoctorProject.Components.Services
@inject PatientContext patientManager
@inject StateContainer<Patient> patientContainer;
@inject MedicalDbContext DbContext
@using Microsoft.EntityFrameworkCore

<MudContainer MaxWidth="MaxWidth.Large" Class="container">

    <!-- Page Header -->
    <section class="section-header text-center">
        <span class="badge">Пациенти</span>
        <h1 class="section-heading">Списък на пациенти</h1>
        <p class="section-subtitle">Управлявайте пациентите лесно и удобно</p>
    </section>

    <!-- Patient Table -->
    <section class="section-table">
        <MudSimpleTable Class="table" Hover="true" Dense="true" Bordered="@bordered" FixedHeader="@fixedheader" Style="@(fixedheader ? "height:400px;" : "")">
            <thead>
                <tr>
                    @foreach (var h in headings)
                    {
                        <th>@h</th>
                    }
                    <th>Действия</th>
                </tr>
            </thead>
            <tbody>
                @if (patients == null)
                {
                    <tr><td colspan="7" class="text-center">Зареждане...</td></tr>
                }
                else
                {
                    @foreach (Patient item in patients)
                    {
                        <tr>
                            <td>@item.FirstName</td>
                            <td>@item.SecondName</td>
                            <td>@item.LastName</td>
                            <td>@item.PhoneNumber</td>
                            <td>@item.UserName</td>
                            <td>@item.Email</td>
                            <td>
                                <MudLink Href="@($"/patients/delete/{item.Id}")" Class="delete-link">Изтрий</MudLink>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </MudSimpleTable>
    </section>

    <!-- Back Button -->
    <section class="section-footer text-center">
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Href="/" StartIcon="@Icons.Material.Filled.ArrowBack">Назад</MudButton>
    </section>

</MudContainer>

<style>
    .container {
        padding: 40px 20px;
    }

    section {
        margin-bottom: 60px;
    }

    .section-header {
        background-color: #f0fdfa;
        padding: 60px 20px;
        border-radius: 12px;
    }

    .badge {
        display: inline-block;
        background-color: #ccfbf1;
        color: #0f766e;
        padding: 6px 12px;
        border-radius: 12px;
        font-size: 0.9rem;
        font-weight: 600;
        margin-bottom: 16px;
    }

    .section-heading {
        font-size: 2.5rem;
        color: #0f766e;
        margin-bottom: 10px;
        font-weight: 700;
    }

    .section-subtitle {
        font-size: 1.2rem;
        color: #555;
        max-width: 600px;
        margin: 0 auto;
    }

    .section-table .table {
        width: 100%;
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        overflow-x: auto;
    }

    th, td {
        padding: 12px 16px;
        text-align: center;
        color: #333;
    }

    th {
        background-color: #e0f2f1;
        color: #0f766e;
        font-weight: 600;
    }

    tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    .delete-link {
        color: #dc2626;
        font-weight: bold;
        text-decoration: none;
    }

    .delete-link:hover {
        text-decoration: underline;
    }

    .section-footer {
        padding-top: 20px;
    }

    @@media (max-width: 768px) {
        .section-heading {
            font-size: 1.8rem;
        }

        .section-subtitle {
            font-size: 1rem;
        }

        th, td {
            font-size: 0.9rem;
        }
    }
</style>

@code {
    bool fixedheader = true;
    private bool bordered = true;

    string[] headings = { "Име", "Презиме", "Фамилия", "Телефон", "Потребителско име", "Имейл" };

    ICollection<Patient> patients;

    protected override async Task OnInitializedAsync()
    {
        await LoadGroups();
    }

    async Task LoadGroups()
    {
        patients = await DbContext.Users
            .Where(u => u.Role == Role.Patient)
            .Select(u => new Patient
            {
                Id = u.Id,
                FirstName = u.FirstName,
                SecondName = u.SecondName,
                LastName = u.LastName,
                PhoneNumber = u.PhoneNumber,
                UserName = u.UserName,
                Email = u.Email
            })
            .ToListAsync();
    }

    void SetGroup(Patient patient)
    {
        patientContainer.SetValue(patient);
    }

    async Task OnDelete(string id)
    {
        try
        {
            await patientManager.DeleteAsync(id);
            await LoadGroups();
        }
        catch (Exception)
        {
            throw;
        }
    }
}
